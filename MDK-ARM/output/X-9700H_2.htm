<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\X-9700H_2.4G_BT_V1_0]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\X-9700H_2.4G_BT_V1_0</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Fri Nov 09 08:53:56 2018
<BR><P>
<H3>Maximum Stack Usage =        336 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; xxxxxtest &rArr; BSPWirelessWriteBytes &rArr; Wireless_Main &rArr; RF_HostTxFunc &rArr; RF_HostTxDatas &rArr; SendData2_4G &rArr; rf_transceiver &rArr; xn297l_transceive &rArr; xn297l_goto_wakeup &rArr; delay_1ms &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3d]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3d]">ADC1_2_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[60]">BSPKeyRoutine</a> from bspkey.o(.text) referenced from main.o(.text)
 <LI><a href="#[5e]">BT_Timer</a> from bluetooth.o(.text) referenced from bspwireless.o(.text)
 <LI><a href="#[25]">BusFault_Handler</a> from mm32f10x_it.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[40]">CAN1_RX1_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[41]">CAN1_SCE_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[a]">CustomHID_Data_Setup</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[e]">CustomHID_GetConfigDescriptor</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[d]">CustomHID_GetDeviceDescriptor</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[ce]">CustomHID_GetHIDDescriptor</a> from usb_prop.o(.text) referenced from usb_prop.o(.text)
 <LI><a href="#[d3]">CustomHID_GetIdleValue</a> from usb_prop.o(.text) referenced from usb_prop.o(.text)
 <LI><a href="#[d1]">CustomHID_GetProtocolValue</a> from usb_prop.o(.text) referenced from usb_prop.o(.text)
 <LI><a href="#[cd]">CustomHID_GetReport</a> from usb_prop.o(.text) referenced from usb_prop.o(.text)
 <LI><a href="#[d0]">CustomHID_GetReportDescriptor</a> from usb_prop.o(.text) referenced from usb_prop.o(.text)
 <LI><a href="#[f]">CustomHID_GetStringDescriptor</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[c]">CustomHID_Get_Interface_Setting</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[b]">CustomHID_NoData_Setup</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[7]">CustomHID_Reset</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[1a]">CustomHID_SetConfiguration</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[1b]">CustomHID_SetDeviceAddress</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[d2]">CustomHID_SetReport</a> from usb_prop.o(.text) referenced from usb_prop.o(.text)
 <LI><a href="#[8]">CustomHID_Status_In</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[9]">CustomHID_Status_Out</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[6]">CustomHID_init</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[36]">DMA1_Channel1_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[37]">DMA1_Channel2_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[38]">DMA1_Channel3_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[39]">DMA1_Channel4_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[3a]">DMA1_Channel5_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[3b]">DMA1_Channel6_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[3c]">DMA1_Channel7_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[28]">DebugMon_Handler</a> from mm32f10x_it.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[1]">EP1_IN_Callback</a> from usb_endp.o(.text) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[2]">EP2_IN_Callback</a> from usb_endp.o(.text) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[4]">EP2_OUT_Callback</a> from usb_endp.o(.text) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[5]">EP3_OUT_Callback</a> from usb_endp.o(.text) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[31]">EXTI0_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[53]">EXTI15_10_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[32]">EXTI1_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[33]">EXTI2_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[34]">EXTI3_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[35]">EXTI4_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[42]">EXTI9_5_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[2f]">FLASH_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[5a]">GetBTData</a> from bluetooth.o(.text) referenced from bluetooth.o(.text)
 <LI><a href="#[23]">HardFault_Handler</a> from mm32f10x_it.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[4b]">I2C1_ER_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[4a]">I2C1_EV_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[4d]">I2C2_ER_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[4c]">I2C2_EV_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[5f]">LedFlash</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[24]">MemManage_Handler</a> from mm32f10x_it.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[22]">NMI_Handler</a> from mm32f10x_it.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[3]">NOP_Process</a> from usb_core.o(.text) referenced 48 times from usb_istr.o(.data)
 <LI><a href="#[1e]">Null</a> from uart1.o(.text) referenced 84 times from uart1.o(.data)
 <LI><a href="#[20]">Null</a> from bsptimer.o(.text) referenced from bsptimer.o(.text)
 <LI><a href="#[2c]">PVD_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[29]">PendSV_Handler</a> from mm32f10x_it.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[30]">RCC_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[5d]">RF_Timer</a> from rf_main.o(.text) referenced from bspwireless.o(.text)
 <LI><a href="#[54]">RTCAlarm_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[2e]">RTC_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[21]">Reset_Handler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[4e]">SPI1_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[4f]">SPI2_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[27]">SVC_Handler</a> from mm32f10x_it.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[9c]">Standard_GetConfiguration</a> from usb_core.o(.text) referenced from usb_core.o(.text)
 <LI><a href="#[9d]">Standard_GetInterface</a> from usb_core.o(.text) referenced from usb_core.o(.text)
 <LI><a href="#[9b]">Standard_GetStatus</a> from usb_core.o(.text) referenced 3 times from usb_core.o(.text)
 <LI><a href="#[2a]">SysTick_Handler</a> from bsptimer.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[57]">SystemInit</a> from system_mm32f103.o(.text) referenced from startup_mm32f103.o(.text)
 <LI><a href="#[2d]">TAMPER_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[43]">TIM1_BRK_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[46]">TIM1_CC_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[45]">TIM1_TRG_COM_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[44]">TIM1_UP_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[47]">TIM2_IRQHandler</a> from bspsound.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[48]">TIM3_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[49]">TIM4_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[61]">Timer</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[50]">UART1_IRQHandler</a> from uart1.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[51]">UART2_IRQHandler</a> from uart2.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[52]">UART3_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[55]">USBWakeUp_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[3e]">USB_HP_CAN1_TX_IRQHandler</a> from bsphid.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[3f]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[26]">UsageFault_Handler</a> from mm32f10x_it.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[14]">Virtual_Com_Port_Data_Setup</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[18]">Virtual_Com_Port_GetConfigDescriptor</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[17]">Virtual_Com_Port_GetDeviceDescriptor</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[d6]">Virtual_Com_Port_GetLineCoding</a> from usb_prop.o(.text) referenced from usb_prop.o(.text)
 <LI><a href="#[19]">Virtual_Com_Port_GetStringDescriptor</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[16]">Virtual_Com_Port_Get_Interface_Setting</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[15]">Virtual_Com_Port_NoData_Setup</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[11]">Virtual_Com_Port_Reset</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[1c]">Virtual_Com_Port_SetConfiguration</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[1d]">Virtual_Com_Port_SetDeviceAddress</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[d7]">Virtual_Com_Port_SetLineCoding</a> from usb_prop.o(.text) referenced from usb_prop.o(.text)
 <LI><a href="#[12]">Virtual_Com_Port_Status_In</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[13]">Virtual_Com_Port_Status_Out</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[10]">Virtual_Com_Port_init</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[2b]">WWDG_IRQHandler</a> from startup_mm32f103.o(.text) referenced from startup_mm32f103.o(RESET)
 <LI><a href="#[59]">WriteData</a> from uart1.o(.text) referenced 3 times from uart1.o(.text)
 <LI><a href="#[58]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mm32f103.o(.text)
 <LI><a href="#[62]">_sputc</a> from printf2.o(i._sputc) referenced from printf2.o(i.__0sprintf$2)
 <LI><a href="#[56]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[58]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(.text)
</UL>
<P><STRONG><a name="[1f0]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[63]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1eb]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1f1]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1f2]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1f3]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1f4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1f5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[21]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_mm32f103.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo96
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>DAC_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundInit
</UL>

<P><STRONG><a name="[1bf]"></a>DAC_Init</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, hal_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundInit
</UL>

<P><STRONG><a name="[1f6]"></a>DAC_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_dac.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>DAC_Cmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundInit
</UL>

<P><STRONG><a name="[1f7]"></a>DAC_DMACmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hal_dac.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>DAC_SoftwareTriggerCmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hal_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_SoftwareTriggerCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundStop
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundInit
</UL>

<P><STRONG><a name="[1f8]"></a>DAC_DualSoftwareTriggerCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hal_dac.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>DAC_WaveGenerationCmd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_dac.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>DAC_SetChannel1Data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundStop
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundInit
</UL>

<P><STRONG><a name="[1fa]"></a>DAC_SetChannel2Data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_dac.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>DAC_SetDualChannelData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_dac.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>DAC_GetDataOutputValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_dac.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMDelete
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMFormat
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASHErase
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMWrite
</UL>

<P><STRONG><a name="[1d4]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMDelete
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMFormat
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASHErase
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMWrite
</UL>

<P><STRONG><a name="[6a]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[69]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[6c]"></a>FLASH_ErasePage</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMDelete
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMFormat
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASHErase
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMWrite
</UL>

<P><STRONG><a name="[6d]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[6e]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[6f]"></a>FLASH_ProgramWord</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[70]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write_NoCheck
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASHErase
</UL>

<P><STRONG><a name="[71]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[72]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[73]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[74]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[200]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>FLASH_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASHErase
</UL>

<P><STRONG><a name="[75]"></a>GPIO_DeInit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, hal_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[77]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[ab]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRF_Configuration
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Configuration
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundInit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPLEDInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPKeyInit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPPowerInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[206]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Disconnect
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PairForRx
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_HostTxDatas
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataBlueT
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRF_SendByte
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPGetWireleeType
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPKeyRoutine
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPKeyInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Timer
</UL>

<P><STRONG><a name="[207]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BScanStop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BClose
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BOpen
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Read
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16PageProgram
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16ClipErase
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16BlockErase
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16SectorErase
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Reset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Open
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipBusy
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_bytes
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_1byte
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Disconnect
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_read_1byte
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WritePage
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseChip
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseBlock64K
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseBlock32K
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseSector
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WaitForWriteEnd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WriteEnable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_ReadID
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRF_SendByte
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRF_Configuration
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Configuration
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_ReadBuffer
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPLEDOff
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPPowerOn
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_read_bytes
</UL>

<P><STRONG><a name="[ad]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BScanStart
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BClose
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Read
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16PageProgram
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16ClipErase
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16BlockErase
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16SectorErase
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Reset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Open
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipBusy
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_bytes
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_1byte
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Disconnect
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_read_1byte
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WritePage
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseChip
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseBlock64K
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseBlock32K
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseSector
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WaitForWriteEnd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WriteEnable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_ReadID
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRF_SendByte
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRF_Configuration
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Configuration
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_ReadBuffer
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPLEDOn
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPPowerOff
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_read_bytes
</UL>

<P><STRONG><a name="[20a]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSystemInit
</UL>

<P><STRONG><a name="[20f]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogInit
</UL>

<P><STRONG><a name="[1ba]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogInit
</UL>

<P><STRONG><a name="[1bb]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogInit
</UL>

<P><STRONG><a name="[1bc]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogReset
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogInit
</UL>

<P><STRONG><a name="[1bd]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogInit
</UL>

<P><STRONG><a name="[1b5]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVU_CheckStatus
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVU_CheckStatus
</UL>

<P><STRONG><a name="[184]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSystemInit
</UL>

<P><STRONG><a name="[bf]"></a>NVIC_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, hal_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQConfig
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
</UL>

<P><STRONG><a name="[210]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_misc.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_misc.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hal_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPTimerInit
</UL>

<P><STRONG><a name="[212]"></a>RCC_DeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogInit
</UL>

<P><STRONG><a name="[78]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[214]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>RCC_HSICmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>RCC_PLLDMDNConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
</UL>

<P><STRONG><a name="[7a]"></a>RCC_PLLConfig</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLDMDNConfig
</UL>

<P><STRONG><a name="[216]"></a>RCC_PLLCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>RCC_ITConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
</UL>

<P><STRONG><a name="[21d]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>RCC_LSEConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>RCC_LSICmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogInit
</UL>

<P><STRONG><a name="[21f]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 240 bytes, Stack size 20 bytes, hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[221]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRF_Configuration
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Configuration
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundInit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPLEDInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPKeyInit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPPowerInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSystemInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[bd]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
</UL>

<P><STRONG><a name="[76]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[68]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DeInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[222]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>SPI_DeInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Init
</UL>

<P><STRONG><a name="[ae]"></a>SPI_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Configuration
</UL>

<P><STRONG><a name="[228]"></a>SPI_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Close
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Open
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Configuration
</UL>

<P><STRONG><a name="[229]"></a>SPI_ITConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>SPI_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>SPI_FifoTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>SPI_SendData</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>

<P><STRONG><a name="[a7]"></a>SPI_ReceiveData</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>

<P><STRONG><a name="[22c]"></a>SPI_CSInternalSelected</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Configuration
</UL>

<P><STRONG><a name="[a6]"></a>SPI_GetFlagStatus</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>

<P><STRONG><a name="[22f]"></a>SPI_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>SPI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>SPI_RxBytes</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>SPI_SlaveAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>TIM_DeInit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[1c1]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundInit
</UL>

<P><STRONG><a name="[1c3]"></a>TIM_OC1Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundInit
</UL>

<P><STRONG><a name="[233]"></a>TIM_OC2Init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>TIM_OC3Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>TIM_OC4Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[84]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[82]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[80]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[7e]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
</UL>

<P><STRONG><a name="[87]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
</UL>

<P><STRONG><a name="[236]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundStop
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundPlay
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRead
</UL>

<P><STRONG><a name="[23b]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>TIM_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundInit
</UL>

<P><STRONG><a name="[23c]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[88]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[8a]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[8c]"></a>TIM_ETRConfig</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[8b]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[8d]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[1c2]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundInit
</UL>

<P><STRONG><a name="[240]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundInit
</UL>

<P><STRONG><a name="[24a]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>TIM_CCxCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>TIM_CCxNCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>TIM_SelectOCxM</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundPlay
</UL>

<P><STRONG><a name="[266]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundPlay
</UL>

<P><STRONG><a name="[267]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>TIM_SetClockDivision</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[26b]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1cf]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>UART_DeInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[8f]"></a>UART_Init</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
</UL>

<P><STRONG><a name="[272]"></a>UART_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>UART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Open
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Close
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Close
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Open
</UL>

<P><STRONG><a name="[eb]"></a>UART_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
</UL>

<P><STRONG><a name="[273]"></a>UART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>UART_SendData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Routine
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Routine
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Write
</UL>

<P><STRONG><a name="[f9]"></a>UART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBTData
</UL>

<P><STRONG><a name="[f2]"></a>UART_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Routine
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Write
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Routine
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Write
</UL>

<P><STRONG><a name="[274]"></a>UART_ClearFlag</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>UART_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>Standard_GetConfiguration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>Standard_SetConfiguration</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[9d]"></a>Standard_GetInterface</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>Standard_SetInterface</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[9b]"></a>Standard_GetStatus</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>Standard_ClearFeature</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Standard_ClearFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[9a]"></a>Standard_SetEndPointFeature</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Standard_SetEndPointFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[97]"></a>Standard_SetDeviceFeature</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetDeviceFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[cf]"></a>Standard_GetDescriptorData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetDescriptorData
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetStringDescriptor
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetConfigDescriptor
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetDeviceDescriptor
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_GetStringDescriptor
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_GetConfigDescriptor
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_GetDeviceDescriptor
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_GetReportDescriptor
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_GetHIDDescriptor
</UL>

<P><STRONG><a name="[a0]"></a>Post0_Process</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[9f]"></a>Setup0_Process</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[a1]"></a>In0_Process</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = In0_Process &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[a2]"></a>Out0_Process</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Out0_Process &rArr; DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[cc]"></a>SetDeviceAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
</UL>

<P><STRONG><a name="[3]"></a>NOP_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> usb_istr.o(.data)
<LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[19b]"></a>USB_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usb_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPHIDInit
</UL>

<P><STRONG><a name="[a3]"></a>CTR_LP</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usb_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[275]"></a>CTR_HP</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_int.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>UserToPMABufferCopy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UserToPMABufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPHIDCustomReport
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPHIDReport
</UL>

<P><STRONG><a name="[92]"></a>PMAToUserBufferCopy</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usb_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PMAToUserBufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP2_OUT_Callback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[a9]"></a>W25Q16Init</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, w25q16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W25Q16Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BiDirectionalLineConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPFlashInit
</UL>

<P><STRONG><a name="[b0]"></a>W25Q16Open</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, w25q16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25Q16Open &rArr; SPIRead &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPFlashOpen
</UL>

<P><STRONG><a name="[b2]"></a>W25Q16Close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, w25q16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPFlashClose
</UL>

<P><STRONG><a name="[b3]"></a>W25Q16Reset</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, w25q16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPFlashReset
</UL>

<P><STRONG><a name="[b5]"></a>W25Q16SectorErase</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, w25q16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipBusy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPFlashSectorErase
</UL>

<P><STRONG><a name="[b6]"></a>W25Q16BlockErase</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, w25q16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipBusy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPFlashBlockErase
</UL>

<P><STRONG><a name="[b7]"></a>W25Q16ClipErase</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, w25q16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipBusy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPFlashClipErase
</UL>

<P><STRONG><a name="[b8]"></a>W25Q16PageProgram</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, w25q16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipBusy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPFlashPageProgram
</UL>

<P><STRONG><a name="[b9]"></a>W25Q16Read</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, w25q16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25Q16Read &rArr; SPIRead &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPFlashRead
</UL>

<P><STRONG><a name="[ba]"></a>Set_System</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set_System &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPHIDInit
</UL>

<P><STRONG><a name="[bb]"></a>Set_USBClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_USBClock
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_USBCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPHIDInit
</UL>

<P><STRONG><a name="[da]"></a>Enter_LowPowerMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
</UL>

<P><STRONG><a name="[276]"></a>Leave_LowPowerMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hw_config.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>USB_Interrupts_Config</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_Interrupts_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPHIDInit
</UL>

<P><STRONG><a name="[d8]"></a>USB_Cable_Config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hw_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPHIDInit
</UL>

<P><STRONG><a name="[c0]"></a>Get_SerialNum</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_init
</UL>

<P><STRONG><a name="[1]"></a>EP1_IN_Callback</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_endp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>EP2_IN_Callback</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_endp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>EP2_OUT_Callback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_endp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EP2_OUT_Callback &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHidRxFlag
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHidRxFlag
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHidRxBuff
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>EP3_OUT_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_endp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[c8]"></a>usb_report_in</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usb_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb_report_in &rArr; usb_ret_status &rArr; usb_report_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ret_status
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_GetReport
</UL>

<P><STRONG><a name="[277]"></a>SystemIap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_iap.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>usb_iap_jump</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_iap.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>USB_Istr</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, usb_istr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HP_CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[6]"></a>CustomHID_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CustomHID_init &rArr; Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>CustomHID_Reset</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CustomHID_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>CustomHID_SetConfiguration</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>CustomHID_SetDeviceAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>CustomHID_Status_In</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>CustomHID_Status_Out</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[cd]"></a>CustomHID_GetReport</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CustomHID_GetReport &rArr; usb_report_in &rArr; usb_ret_status &rArr; usb_report_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_report_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>CustomHID_GetIdleValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>CustomHID_SetReport</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>CustomHID_GetProtocolValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>CustomHID_GetHIDDescriptor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CustomHID_GetHIDDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>CustomHID_GetReportDescriptor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CustomHID_GetReportDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.text)
</UL>
<P><STRONG><a name="[a]"></a>CustomHID_Data_Setup</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CustomHID_Data_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[d5]"></a>CustomHID_SetIdle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_NoData_Setup
</UL>

<P><STRONG><a name="[d4]"></a>CustomHID_SetProtocol</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_NoData_Setup
</UL>

<P><STRONG><a name="[b]"></a>CustomHID_NoData_Setup</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CustomHID_NoData_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_SetProtocol
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_SetIdle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>CustomHID_GetDeviceDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CustomHID_GetDeviceDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>CustomHID_GetConfigDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CustomHID_GetConfigDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>CustomHID_GetStringDescriptor</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CustomHID_GetStringDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>CustomHID_Get_Interface_Setting</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>Virtual_Com_Port_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Virtual_Com_Port_init &rArr; Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>Virtual_Com_Port_Reset</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Virtual_Com_Port_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>Virtual_Com_Port_SetConfiguration</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>Virtual_Com_Port_SetDeviceAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>Virtual_Com_Port_Status_In</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>Virtual_Com_Port_Status_Out</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[d7]"></a>Virtual_Com_Port_SetLineCoding</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.text)
</UL>
<P><STRONG><a name="[d6]"></a>Virtual_Com_Port_GetLineCoding</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>Virtual_Com_Port_Data_Setup</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Virtual_Com_Port_Data_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>Virtual_Com_Port_NoData_Setup</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>Virtual_Com_Port_GetDeviceDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Virtual_Com_Port_GetDeviceDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>Virtual_Com_Port_GetConfigDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Virtual_Com_Port_GetConfigDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>Virtual_Com_Port_GetStringDescriptor</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Virtual_Com_Port_GetStringDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>Virtual_Com_Port_Get_Interface_Setting</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[cb]"></a>PowerOn</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, usb_pwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerOn
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPHIDConnet
</UL>

<P><STRONG><a name="[d9]"></a>PowerOff</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPHIDGetUSBConState
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPHIDDisconnet
</UL>

<P><STRONG><a name="[ca]"></a>Suspend</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_pwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_LowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[dc]"></a>Resume_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_pwr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>

<P><STRONG><a name="[db]"></a>Resume</STRONG> (Thumb, 138 bytes, Stack size 4 bytes, usb_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>

<P><STRONG><a name="[dd]"></a>CM3800BInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, 3800b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CM3800BInit &rArr; UART1Init &rArr; UART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPCodeScannerInit
</UL>

<P><STRONG><a name="[df]"></a>CM3800BOpen</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, 3800b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CM3800BOpen &rArr; UART1Open
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Open
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPCodeScannerOpen
</UL>

<P><STRONG><a name="[e1]"></a>CM3800BClose</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, 3800b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Close
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPCodeScannerClose
</UL>

<P><STRONG><a name="[e3]"></a>CM3800BScanStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, 3800b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPCodeScannerScanStart
</UL>

<P><STRONG><a name="[e4]"></a>CM3800BScanStop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, 3800b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CM3800BScanStop
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPCodeScannerScanStop
</UL>

<P><STRONG><a name="[e5]"></a>CM3800BAllowRead</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, 3800b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1AllowRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPCodeScannerAllowRead
</UL>

<P><STRONG><a name="[e7]"></a>CM3800BRead</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, 3800b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPCodeScannerRead
</UL>

<P><STRONG><a name="[e9]"></a>CM3800BRoutine</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, 3800b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CM3800BRoutine &rArr; UART1Routine &rArr; FIFOPop
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Routine
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPCodeScannerRoutine
</UL>

<P><STRONG><a name="[de]"></a>UART1Init</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART1Init &rArr; UART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOCreate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOCallbackWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BInit
</UL>

<P><STRONG><a name="[279]"></a>UART1AddReadISR</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uart1.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>UART1AddWriteISR</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uart1.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>UART1Open</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1Open
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BOpen
</UL>

<P><STRONG><a name="[e2]"></a>UART1Close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOClear
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BClose
</UL>

<P><STRONG><a name="[f0]"></a>UART1Write</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uart1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOPush
</UL>

<P><STRONG><a name="[e6]"></a>UART1AllowRead</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOCount
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BAllowRead
</UL>

<P><STRONG><a name="[e8]"></a>UART1Read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOPop
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BRead
</UL>

<P><STRONG><a name="[f6]"></a>UART1BufClear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOClear
</UL>

<P><STRONG><a name="[ea]"></a>UART1Routine</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1Routine &rArr; FIFOPop
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOPop
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOCount
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BRoutine
</UL>

<P><STRONG><a name="[50]"></a>UART1_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART1_IRQHandler &rArr; FIFOPush
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOPush
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOPop
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>ascii_mbtowc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ascii.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ces_gbk_mbtowc
</UL>

<P><STRONG><a name="[fe]"></a>ascii_wctomb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ascii.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ces_gbk_wctomb
</UL>

<P><STRONG><a name="[fa]"></a>ces_gbk_mbtowc</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ces_gbk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gbk_mbtowc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_mbtowc
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp936_mbtowc
</UL>

<P><STRONG><a name="[fd]"></a>ces_gbk_wctomb</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ces_gbk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gbk_wctomb
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp936_wctomb
</UL>

<P><STRONG><a name="[100]"></a>cp936_mbtowc</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, cp936.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ces_gbk_mbtowc
</UL>

<P><STRONG><a name="[101]"></a>cp936_wctomb</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, cp936.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ces_gbk_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTF8_ConvertGBK
</UL>

<P><STRONG><a name="[102]"></a>cp936ext_mbtowc</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, cp936ext.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractBit16
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gbk_mbtowc
</UL>

<P><STRONG><a name="[104]"></a>cp936ext_wctomb</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, cp936ext.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractBit16
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gbk_wctomb
</UL>

<P><STRONG><a name="[103]"></a>ExtractBit16</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, encodedataextract.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gbkext_inv_wctomb
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gbkext2_mbtowc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gbkext1_mbtowc
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gb2312_wctomb
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gb2312_mbtowc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp936ext_wctomb
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp936ext_mbtowc
</UL>

<P><STRONG><a name="[106]"></a>ExtractSummary16</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, encodedataextract.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gbkext_inv_wctomb
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gb2312_wctomb
</UL>

<P><STRONG><a name="[107]"></a>ExtractBit8</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, encodedataextract.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_ReadBuffer
</UL>

<P><STRONG><a name="[108]"></a>gb2312_mbtowc</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, gb2312.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractBit16
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gbk_mbtowc
</UL>

<P><STRONG><a name="[109]"></a>gb2312_wctomb</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, gb2312.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractSummary16
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractBit16
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gbk_wctomb
</UL>

<P><STRONG><a name="[fc]"></a>gbk_mbtowc</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, gbk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gbkext2_mbtowc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gbkext1_mbtowc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gb2312_mbtowc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp936ext_mbtowc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ces_gbk_mbtowc
</UL>

<P><STRONG><a name="[ff]"></a>gbk_wctomb</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, gbk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gbkext_inv_wctomb
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gb2312_wctomb
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp936ext_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ces_gbk_wctomb
</UL>

<P><STRONG><a name="[10c]"></a>gbkext_inv_wctomb</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, gbkext_inv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractSummary16
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractBit16
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gbk_wctomb
</UL>

<P><STRONG><a name="[10a]"></a>gbkext1_mbtowc</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, gbkext1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractBit16
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gbk_mbtowc
</UL>

<P><STRONG><a name="[10b]"></a>gbkext2_mbtowc</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, gbkext2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractBit16
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gbk_mbtowc
</UL>

<P><STRONG><a name="[146]"></a>utf8_mbtowc</STRONG> (Thumb, 522 bytes, Stack size 12 bytes, utf8.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTF8_ConvertGBK
</UL>

<P><STRONG><a name="[27b]"></a>utf8_wctomb</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, utf8.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>sFLASH_Configuration</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, drv_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BiDirectionalLineConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_Init
</UL>

<P><STRONG><a name="[10e]"></a>sFLASH_SendByte</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WritePage
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseChip
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseBlock64K
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseBlock32K
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseSector
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WaitForWriteEnd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WriteEnable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_ReadID
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_ReadBuffer
</UL>

<P><STRONG><a name="[10f]"></a>sRF_Configuration</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, drv_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sRF_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Carrier
</UL>

<P><STRONG><a name="[110]"></a>sRF_SendByte</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, drv_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_bytes
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_1byte
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_read_1byte
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_read_bytes
</UL>

<P><STRONG><a name="[112]"></a>UART_IRQConfig</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_IRQConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[113]"></a>UART_Configuration</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART_Configuration &rArr; UART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initial
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBAUD
</UL>

<P><STRONG><a name="[114]"></a>UART_SendByte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendDatas
</UL>

<P><STRONG><a name="[115]"></a>UART_SendDatas</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_SendDatas &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPTimerDelay
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_TxTPDatas
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_TxHidDatas
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Command
</UL>

<P><STRONG><a name="[1ae]"></a>RingBuffer_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ring_buffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWirelessInit
</UL>

<P><STRONG><a name="[117]"></a>RingBuffer_Read</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ring_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RingBuffer_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_HostTxFunc
</UL>

<P><STRONG><a name="[119]"></a>RingBuffer_Write</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ring_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RingBuffer_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Timer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWirelessWriteBytes
</UL>

<P><STRONG><a name="[27c]"></a>RingBuffer_Clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ring_buffer.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>RingBuffer_Data_Len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ring_buffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_HostTxFunc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Timer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWirelessWriteBytes
</UL>

<P><STRONG><a name="[11a]"></a>W25Qxx_ReadID</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_Init
</UL>

<P><STRONG><a name="[11b]"></a>W25Qxx_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_ReadID
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Configuration
</UL>

<P><STRONG><a name="[11c]"></a>W25Qxx_WriteEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WritePage
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseChip
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseBlock64K
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseBlock32K
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseSector
</UL>

<P><STRONG><a name="[11d]"></a>W25Qxx_WaitForWriteEnd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WritePage
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseChip
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseBlock64K
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseBlock32K
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseSector
</UL>

<P><STRONG><a name="[11e]"></a>W25Qxx_EraseSector</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WaitForWriteEnd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WriteEnable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>

<P><STRONG><a name="[11f]"></a>W25Qxx_EraseBlock32K</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WaitForWriteEnd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WriteEnable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>

<P><STRONG><a name="[120]"></a>W25Qxx_EraseBlock64K</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WaitForWriteEnd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WriteEnable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>

<P><STRONG><a name="[121]"></a>W25Qxx_EraseChip</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WaitForWriteEnd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WriteEnable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>

<P><STRONG><a name="[122]"></a>W25Qxx_WritePage</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WaitForWriteEnd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WriteEnable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WriteBuffer
</UL>

<P><STRONG><a name="[123]"></a>W25Qxx_WriteBuffer</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WritePage
</UL>

<P><STRONG><a name="[105]"></a>W25Qxx_ReadBuffer</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractBit8
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractSummary16
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractBit16
</UL>

<P><STRONG><a name="[124]"></a>rf_cmd_judge</STRONG> (Thumb, 624 bytes, Stack size 16 bytes, rf_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rf_cmd_judge &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Adjustment0
</UL>

<P><STRONG><a name="[127]"></a>set_type_init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rf_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_host_cmd
</UL>

<P><STRONG><a name="[27d]"></a>rf_lang_get</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rf_cmd.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>rf_host_cmd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rf_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf_host_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_type_init
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_HostTxFunc
</UL>

<P><STRONG><a name="[128]"></a>delay_1ms</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rf_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = delay_1ms &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPTimerDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Disconnect
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PairForRx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx_delay
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_transceive
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_wakeup
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestMatch
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBAUD
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Carrier
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_chip_reset
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_rx_start
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_tx_start
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_rx
</UL>

<P><STRONG><a name="[132]"></a>rf_set_pipe</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PairForRx
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>

<P><STRONG><a name="[129]"></a>rf_set_ch</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rf_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rf_set_ch &rArr; xn297l_set_channel &rArr; xn297l_write_1byte &rArr; sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_set_channel
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_read_1byte
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_get_ch_no
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_goto_next_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PairForRx
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_transceiver
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>

<P><STRONG><a name="[12e]"></a>rf_set_mac</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rf_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_set_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PairForRx
</UL>

<P><STRONG><a name="[130]"></a>rf_init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rf_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rf_init &rArr; xn297l_init &rArr; xn297l_chip_reset &rArr; delay_1ms &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_sleep
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMReadBytes
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_ch
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_pipe
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRF_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWirelessInit
</UL>

<P><STRONG><a name="[135]"></a>rf_transceiver</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, rf_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rf_transceiver &rArr; xn297l_transceive &rArr; xn297l_goto_wakeup &rArr; delay_1ms &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_transceive
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_wakeup
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_sleep
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_HostTout
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogReset
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd2_4G
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData2_4G
</UL>

<P><STRONG><a name="[1b2]"></a>GetMAC2_4G</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf_main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWirelseeRequestMatch
</UL>

<P><STRONG><a name="[5d]"></a>RF_Timer</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, rf_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF_Timer &rArr; RingBuffer_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Data_Len
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bspwireless.o(.text)
</UL>
<P><STRONG><a name="[139]"></a>RF_HostTout</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, rf_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd2_4G
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData2_4G
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_transceiver
</UL>

<P><STRONG><a name="[13b]"></a>usb_tx_delay</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rf_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogReset
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd2_4G
</UL>

<P><STRONG><a name="[141]"></a>RF_HostTxDatas</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rf_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = RF_HostTxDatas &rArr; SendData2_4G &rArr; rf_transceiver &rArr; xn297l_transceive &rArr; xn297l_goto_wakeup &rArr; delay_1ms &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataBlueT
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData2_4G
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_HostTxFunc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PairForRx
</UL>

<P><STRONG><a name="[27e]"></a>getPkt_sid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_main.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>SendCmd2_4G</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, rf_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx_delay
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_HostTout
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_transceiver
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[14a]"></a>BAR_SameCheck</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_HostTxFunc
</UL>

<P><STRONG><a name="[143]"></a>RF_PairForRx</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, rf_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Disconnect
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_HostTxDatas
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogReset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_mac
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_ch
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_pipe
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWirelseeRequestMatch
</UL>

<P><STRONG><a name="[145]"></a>UTF8_ConvertGBK</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, rf_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogReset
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_mbtowc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp936_wctomb
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[147]"></a>Alipay_Ticket</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, rf_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Alipay_Ticket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Adjustment0
</UL>

<P><STRONG><a name="[148]"></a>Data_Adjustment0</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, rf_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Data_Adjustment0 &rArr; Alipay_Ticket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alipay_Ticket
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_cmd_judge
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_HostTxFunc
</UL>

<P><STRONG><a name="[149]"></a>RF_HostTxFunc</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, rf_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = RF_HostTxFunc &rArr; RF_HostTxDatas &rArr; SendData2_4G &rArr; rf_transceiver &rArr; xn297l_transceive &rArr; xn297l_goto_wakeup &rArr; delay_1ms &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Adjustment0
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAR_SameCheck
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_HostTxDatas
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogReset
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_host_cmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Data_Len
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Main
</UL>

<P><STRONG><a name="[14b]"></a>Wireless_Main</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rf_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Wireless_Main &rArr; RF_HostTxFunc &rArr; RF_HostTxDatas &rArr; SendData2_4G &rArr; rf_transceiver &rArr; xn297l_transceive &rArr; xn297l_goto_wakeup &rArr; delay_1ms &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_HostTxFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWirelessWriteBytes
</UL>

<P><STRONG><a name="[12d]"></a>xn297l_read_1byte</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xn297l_read_1byte &rArr; sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRF_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_ch
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_get_irq_flag
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_fifo_read
</UL>

<P><STRONG><a name="[14f]"></a>xn297l_clear_tx_fifo</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xn297l_clear_tx_fifo &rArr; xn297l_write_1byte &rArr; sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_1byte
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_transceive
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_tx
</UL>

<P><STRONG><a name="[150]"></a>xn297l_clear_rx_fifo</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xn297l_clear_rx_fifo &rArr; xn297l_write_1byte &rArr; sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_1byte
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_transceive
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_rx
</UL>

<P><STRONG><a name="[12f]"></a>xn297l_set_mac</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xn297l_set_mac &rArr; xn297l_write_bytes &rArr; sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_mac
</UL>

<P><STRONG><a name="[12c]"></a>xn297l_set_channel</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xn297l_set_channel &rArr; xn297l_write_1byte &rArr; sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_1byte
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_ch
</UL>

<P><STRONG><a name="[154]"></a>xn297l_set_ce_1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xn297l_set_ce_1 &rArr; xn297l_write_1byte &rArr; sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_1byte
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_rx_start
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_tx_start
</UL>

<P><STRONG><a name="[155]"></a>xn297l_set_ce_0</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xn297l_set_ce_0 &rArr; xn297l_write_1byte &rArr; sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_1byte
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_transceive
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_sleep
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Carrier
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_pd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_stb3
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_stb1
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_chip_reset
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_rx
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_tx
</UL>

<P><STRONG><a name="[156]"></a>xn297l_goto_stb1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xn297l_goto_stb1 &rArr; xn297l_set_ce_0 &rArr; xn297l_write_1byte &rArr; sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_1byte
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_set_ce_0
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_transceive
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_wakeup
</UL>

<P><STRONG><a name="[157]"></a>xn297l_goto_stb3</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xn297l_goto_stb3 &rArr; xn297l_set_ce_0 &rArr; xn297l_write_1byte &rArr; sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_1byte
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_set_ce_0
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_transceive
</UL>

<P><STRONG><a name="[134]"></a>xn297l_goto_sleep</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xn297l_goto_sleep &rArr; xn297l_set_ce_0 &rArr; xn297l_write_1byte &rArr; sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_1byte
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_set_ce_0
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_transceive
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_transceiver
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>

<P><STRONG><a name="[136]"></a>xn297l_goto_wakeup</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xn297l_goto_wakeup &rArr; delay_1ms &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_stb1
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_transceive
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_transceiver
</UL>

<P><STRONG><a name="[158]"></a>xn297l_goto_pd</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, xn297l.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_bytes
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_set_ce_0
</UL>

<P><STRONG><a name="[133]"></a>xn297l_init</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xn297l_init &rArr; xn297l_chip_reset &rArr; delay_1ms &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_bytes
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_1byte
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_set_mac
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_set_channel
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_read_1byte
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_chip_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>

<P><STRONG><a name="[138]"></a>xn297l_transceive</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xn297l_transceive &rArr; xn297l_goto_wakeup &rArr; delay_1ms &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_wakeup
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_sleep
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPTimerDelay
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_stb3
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_stb1
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_set_ce_0
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_clear_rx_fifo
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_clear_tx_fifo
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_get_irq_flag
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_clear_irq_flag
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_rx_start
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_tx_start
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_rx
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_tx
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_fifo_read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_ack_fifo
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_pld_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_transceiver
</UL>

<P><STRONG><a name="[160]"></a>RF_Carrier</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, xn297l.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_bytes
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_1byte
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogReset
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPTimerDelay
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRF_Configuration
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_set_ce_0
</UL>

<P><STRONG><a name="[5e]"></a>BT_Timer</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BT_Timer
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bspwireless.o(.text)
</UL>
<P><STRONG><a name="[167]"></a>BT_UART_Rx</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, bluetooth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBTData
</UL>

<P><STRONG><a name="[161]"></a>BT_Command</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BT_Command &rArr; UART_SendDatas &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogReset
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendDatas
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initial
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ConnectReq
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Reconnect
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_PairClear
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_SetName
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBAUD
</UL>

<P><STRONG><a name="[162]"></a>BT_PairClear</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bluetooth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Command
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[164]"></a>BT_Reconnect</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, bluetooth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Command
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[144]"></a>BT_Disconnect</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BT_Disconnect &rArr; delay_1ms &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PairForRx
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initial
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ConnectReq
</UL>

<P><STRONG><a name="[165]"></a>BT_ConnectReq</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, bluetooth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Disconnect
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Command
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[16c]"></a>BT_Initial</STRONG> (Thumb, 786 bytes, Stack size 16 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = BT_Initial &rArr; BT_SetName &rArr; BT_Command &rArr; UART_SendDatas &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Disconnect
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2AddReadISR
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Command
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_SetName
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWirelessInit
</UL>

<P><STRONG><a name="[140]"></a>BT_TxTPDatas</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BT_TxTPDatas &rArr; UART_SendDatas &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogReset
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendDatas
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataBlueT
</UL>

<P><STRONG><a name="[16e]"></a>BT_TxHidDatas</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, bluetooth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogReset
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendDatas
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[16f]"></a>UART2Init</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOCreate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOCallbackWrite
</UL>

<P><STRONG><a name="[16d]"></a>UART2AddReadISR</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uart2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initial
</UL>

<P><STRONG><a name="[27f]"></a>UART2AddWriteISR</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uart2.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>UART2Open</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
</UL>

<P><STRONG><a name="[171]"></a>UART2Close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOClear
</UL>

<P><STRONG><a name="[172]"></a>UART2Write</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOPush
</UL>

<P><STRONG><a name="[173]"></a>UART2AllowRead</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOCount
</UL>

<P><STRONG><a name="[174]"></a>UART2Read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOPop
</UL>

<P><STRONG><a name="[175]"></a>UART2BufClear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOClear
</UL>

<P><STRONG><a name="[176]"></a>UART2Routine</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOPop
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOCount
</UL>

<P><STRONG><a name="[51]"></a>UART2_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART2_IRQHandler &rArr; FIFOPush
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOPush
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOPop
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[177]"></a>BSPRoutine</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSPRoutine &rArr; BSPCodeScannerRoutine &rArr; CM3800BRoutine &rArr; UART1Routine &rArr; FIFOPop
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWirelessRoutine
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPCodeScannerRoutine
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17a]"></a>BSPTimerInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, bsptimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSPTimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1af]"></a>BSPTimerIntervalCreate</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, bsptimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BSPTimerIntervalCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestMatch
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWirelessInit
</UL>

<P><STRONG><a name="[17c]"></a>BSPTimerIntervalDestroy</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bsptimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSystemIntOpen
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSystemIntClose
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestMatch
</UL>

<P><STRONG><a name="[280]"></a>BSPTimerOnceCreate</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, bsptimer.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>BSPTimerDelay</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, bsptimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_transceive
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendDatas
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Carrier
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_tx
</UL>

<P><STRONG><a name="[2a]"></a>SysTick_Handler</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, bsptimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[182]"></a>BSPSystemInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bspsystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BSPSystemInit &rArr; GPIO_PinRemapConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17e]"></a>BSPSystemIntOpen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bspsystem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPTimerIntervalDestroy
</UL>

<P><STRONG><a name="[17d]"></a>BSPSystemIntClose</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bspsystem.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPTimerIntervalDestroy
</UL>

<P><STRONG><a name="[281]"></a>BSPSystemReset</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, bspsystem.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>BSPPowerInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsppower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSPPowerInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[186]"></a>BSPPowerOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsppower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSPPowerOn
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[187]"></a>BSPPowerOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsppower.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[188]"></a>BSPKeyInit</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, bspkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BSPKeyInit &rArr; FIFOCreate &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOCreate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOCallbackWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e2]"></a>BSPKeyModeSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bspkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e3]"></a>BSPKeyEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bspkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[282]"></a>BSPKeyDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bspkey.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>BSPKeyAllowRead</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bspkey.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOCount
</UL>

<P><STRONG><a name="[18a]"></a>BSPKeyRead</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bspkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSPKeyRead &rArr; FIFOPop
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOPop
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>BSPKeyRoutine</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bspkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSPKeyRoutine &rArr; FIFOPush
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOPush
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanPress
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[18d]"></a>BSPLEDInit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bspled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSPLEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18e]"></a>BSPLEDOn</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bspled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSPLEDOn
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestMatch
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedFlash
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlash
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPLEDFlashRoutine
</UL>

<P><STRONG><a name="[18f]"></a>BSPLEDOff</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bspled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSPLEDOff
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedFlash
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlash
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPLEDFlashRoutine
</UL>

<P><STRONG><a name="[283]"></a>BSPLEDFlashOn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bspled.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>BSPLEDFlashOff</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bspled.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>BSPLEDFlashRoutine</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, bspled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPLEDOff
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPLEDOn
</UL>

<P><STRONG><a name="[191]"></a>BSPFlashInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bspflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSPFlashInit &rArr; W25Q16Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[192]"></a>BSPFlashOpen</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bspflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSPFlashOpen &rArr; W25Q16Open &rArr; SPIRead &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Open
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[193]"></a>BSPFlashClose</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Close
</UL>

<P><STRONG><a name="[194]"></a>BSPFlashReset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Reset
</UL>

<P><STRONG><a name="[195]"></a>BSPFlashSectorErase</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16SectorErase
</UL>

<P><STRONG><a name="[196]"></a>BSPFlashBlockErase</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16BlockErase
</UL>

<P><STRONG><a name="[197]"></a>BSPFlashClipErase</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16ClipErase
</UL>

<P><STRONG><a name="[198]"></a>BSPFlashPageProgram</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16PageProgram
</UL>

<P><STRONG><a name="[199]"></a>BSPFlashRead</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bspflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSPFlashRead &rArr; W25Q16Read &rArr; SPIRead &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundPlay
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRead
</UL>

<P><STRONG><a name="[c3]"></a>GetHidRxBuff</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsphid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP2_OUT_Callback
</UL>

<P><STRONG><a name="[285]"></a>ConfigHidRxBuff</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsphid.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>SetHidRxFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsphid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP2_OUT_Callback
</UL>

<P><STRONG><a name="[286]"></a>ClrHidRxFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsphid.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>GetHidRxFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsphid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP2_OUT_Callback
</UL>

<P><STRONG><a name="[19a]"></a>BSPHIDInit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsphid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSPHIDInit &rArr; Set_System &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsphid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USB_HP_CAN1_TX_IRQHandler &rArr; USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[19c]"></a>BSPHIDReport</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, bsphid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyMemset
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyMemcoy
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPHIDClrResidueKey
</UL>

<P><STRONG><a name="[1a0]"></a>BSPHIDWaitOver</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsphid.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPHIDClrResidueKey
</UL>

<P><STRONG><a name="[19f]"></a>BSPHIDClrResidueKey</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bsphid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPHIDWaitOver
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPHIDReport
</UL>

<P><STRONG><a name="[1a1]"></a>BSPHIDCustomReport</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsphid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
</UL>

<P><STRONG><a name="[287]"></a>BSPHIDCustomWaitOver</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bsphid.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>BSPHIDConnet</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsphid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>

<P><STRONG><a name="[1a3]"></a>BSPHIDDisconnet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsphid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff
</UL>

<P><STRONG><a name="[1a4]"></a>BSPHIDGetUSBConState</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bsphid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff
</UL>

<P><STRONG><a name="[1a5]"></a>BSPCodeScannerInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bspcodescanner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BSPCodeScannerInit &rArr; CM3800BInit &rArr; UART1Init &rArr; UART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BInit
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a6]"></a>BSPCodeScannerOpen</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bspcodescanner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSPCodeScannerOpen &rArr; CM3800BOpen &rArr; UART1Open
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BOpen
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>BSPCodeScannerClose</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bspcodescanner.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BClose
</UL>

<P><STRONG><a name="[1a8]"></a>BSPCodeScannerScanStart</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bspcodescanner.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BScanStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanCode
</UL>

<P><STRONG><a name="[1a9]"></a>BSPCodeScannerScanStop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bspcodescanner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSPCodeScannerScanStop &rArr; CM3800BScanStop
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BScanStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestMatch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer
</UL>

<P><STRONG><a name="[1aa]"></a>BSPCodeScannerAllowRead</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bspcodescanner.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BAllowRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[1ab]"></a>BSPCodeScannerRead</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bspcodescanner.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[178]"></a>BSPCodeScannerRoutine</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bspcodescanner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSPCodeScannerRoutine &rArr; CM3800BRoutine &rArr; UART1Routine &rArr; FIFOPop
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM3800BRoutine
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPRoutine
</UL>

<P><STRONG><a name="[13d]"></a>crc_high_first</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, bspwireless.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc_high_first
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkData
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData2_4G
</UL>

<P><STRONG><a name="[13e]"></a>checkData</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bspwireless.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = checkData &rArr; crc_high_first
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_high_first
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData2_4G
</UL>

<P><STRONG><a name="[1ac]"></a>BSPGetWireleeType</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bspwireless.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[1ad]"></a>BSPWirelessInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bspwireless.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = BSPWirelessInit &rArr; BT_Initial &rArr; BT_SetName &rArr; BT_Command &rArr; UART_SendDatas &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPTimerIntervalCreate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initial
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b0]"></a>BSPWirelessWriteBytes</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bspwireless.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = BSPWirelessWriteBytes &rArr; Wireless_Main &rArr; RF_HostTxFunc &rArr; RF_HostTxDatas &rArr; SendData2_4G &rArr; rf_transceiver &rArr; xn297l_transceive &rArr; xn297l_goto_wakeup &rArr; delay_1ms &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Main
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Data_Len
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xxxxxtest
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[1b1]"></a>BSPWirelseeRequestMatch</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bspwireless.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PairForRx
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMAC2_4G
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogReset
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestMatch
</UL>

<P><STRONG><a name="[179]"></a>BSPWirelessRoutine</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bspwireless.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPRoutine
</UL>

<P><STRONG><a name="[288]"></a>BSPWirelessConfig</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bspwireless.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>BSPWirelessOpen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bspwireless.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>BSPWirelessClose</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bspwireless.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>BSPWirelessReset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bspwireless.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>BSPWirelessConnet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bspwireless.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>BSPWirelessDisconnet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bspwireless.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>BSPWirelessOnline</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bspwireless.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>BSPWirelessBufCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bspwireless.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>BSPWirelessBufClear</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bspwireless.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>BSPWirelessReadByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bspwireless.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>BSPWirelessReadBytes</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bspwireless.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>BSPWirelessAddWriteISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bspwireless.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>BSPWirelessAddReadISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bspwireless.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>BSPWatchDogInit</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, bspwatchdog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVU_CheckStatus
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVU_CheckStatus
</UL>

<P><STRONG><a name="[137]"></a>BSPWatchDogReset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bspwatchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSPWatchDogReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_TxTPDatas
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_HostTxFunc
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTF8_ConvertGBK
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PairForRx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx_delay
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_transceiver
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWirelseeRequestMatch
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_TxHidDatas
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Command
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Carrier
</UL>

<P><STRONG><a name="[1be]"></a>BSPSoundInit</STRONG> (Thumb, 288 bytes, Stack size 72 bytes, bspsound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSPSoundInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel1Data
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SoftwareTriggerCmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DeInit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ca]"></a>BSPSoundPlay</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, bspsound.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPFlashRead
</UL>

<P><STRONG><a name="[1cd]"></a>BSPSoundStop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bspsound.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel1Data
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SoftwareTriggerCmd
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>

<P><STRONG><a name="[47]"></a>TIM2_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bspsound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIM2_IRQHandler &rArr; SoundRead &rArr; BSPFlashRead &rArr; W25Q16Read &rArr; SPIRead &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel1Data
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SoftwareTriggerCmd
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[1e4]"></a>BSPEEPROMInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, bspeeprom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d6]"></a>BSPEEPROMRead</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bspeeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSPEEPROMRead
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMReadBytes
</UL>

<P><STRONG><a name="[131]"></a>BSPEEPROMReadBytes</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, bspeeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BSPEEPROMReadBytes &rArr; BSPEEPROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMRead
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMWrite
</UL>

<P><STRONG><a name="[1b3]"></a>BSPEEPROMWrite</STRONG> (Thumb, 280 bytes, Stack size 1080 bytes, bspeeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMReadBytes
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write_NoCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWirelseeRequestMatch
</UL>

<P><STRONG><a name="[1d7]"></a>BSPEEPROMFormat</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bspeeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>

<P><STRONG><a name="[1d8]"></a>BSPEEPROMDelete</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, bspeeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASHErase
</UL>

<P><STRONG><a name="[1df]"></a>IsTestOver</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[1e0]"></a>IsRequestMatch</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[1db]"></a>IsDataCorrect</STRONG> (Thumb, 54 bytes, Stack size 312 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1dd]"></a>RequestMatch</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanCode
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWirelseeRequestMatch
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPCodeScannerScanStop
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPLEDOn
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPTimerIntervalDestroy
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPTimerIntervalCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[1de]"></a>test</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestMatch
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRequestMatch
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTestOver
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanCode
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMWrite
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWirelessWriteBytes
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPCodeScannerRead
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPCodeScannerAllowRead
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPCodeScannerScanStop
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPLEDOff
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPLEDOn
</UL>

<P><STRONG><a name="[1e1]"></a>xxxxxtest</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = xxxxxtest &rArr; BSPWirelessWriteBytes &rArr; Wireless_Main &rArr; RF_HostTxFunc &rArr; RF_HostTxDatas &rArr; SendData2_4G &rArr; rf_transceiver &rArr; xn297l_transceive &rArr; xn297l_goto_wakeup &rArr; delay_1ms &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWirelessWriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>main</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = main &rArr; xxxxxtest &rArr; BSPWirelessWriteBytes &rArr; Wireless_Main &rArr; RF_HostTxFunc &rArr; RF_HostTxDatas &rArr; SendData2_4G &rArr; rf_transceiver &rArr; xn297l_transceive &rArr; xn297l_goto_wakeup &rArr; delay_1ms &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMReadBytes
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xxxxxtest
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMInit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSoundInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWirelessInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPCodeScannerOpen
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPCodeScannerInit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPHIDInit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPFlashOpen
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPFlashInit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPLEDInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPKeyRead
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPKeyEnable
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPKeyModeSet
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPKeyInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPPowerOn
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPPowerInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSystemInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPSystemIntOpen
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPTimerIntervalCreate
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPTimerInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPRoutine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[22]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f103.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData2_4G
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Read
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Command
</UL>

<P><STRONG><a name="[1dc]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDataCorrect
</UL>

<P><STRONG><a name="[295]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[296]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_report_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTF8_ConvertGBK
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_SetName
</UL>

<P><STRONG><a name="[298]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[163]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_TxTPDatas
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_TxHidDatas
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initial
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ConnectReq
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Reconnect
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_PairClear
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_SetName
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBAUD
</UL>

<P><STRONG><a name="[125]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_TxTPDatas
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alipay_Ticket
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd2_4G
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData2_4G
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_cmd_judge
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_TxHidDatas
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initial
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ConnectReq
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Reconnect
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_PairClear
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_SetName
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBAUD
</UL>

<P><STRONG><a name="[180]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPTimerDelay
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPTimerDelay
</UL>

<P><STRONG><a name="[181]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPTimerDelay
</UL>

<P><STRONG><a name="[1e9]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[299]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1e8]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[64]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[29b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[29c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>FIFOCallbackWrite</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifo.o(i.FIFOCallbackWrite))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPKeyInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
</UL>

<P><STRONG><a name="[ef]"></a>FIFOClear</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fifo.o(i.FIFOClear), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Close
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1BufClear
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2BufClear
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Close
</UL>

<P><STRONG><a name="[f4]"></a>FIFOCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fifo.o(i.FIFOCount))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Routine
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1AllowRead
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPKeyAllowRead
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Routine
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2AllowRead
</UL>

<P><STRONG><a name="[ec]"></a>FIFOCreate</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fifo.o(i.FIFOCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FIFOCreate &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPKeyInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
</UL>

<P><STRONG><a name="[f5]"></a>FIFOPop</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fifo.o(i.FIFOPop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FIFOPop
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Routine
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Read
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPKeyRead
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Routine
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Read
</UL>

<P><STRONG><a name="[f1]"></a>FIFOPush</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fifo.o(i.FIFOPush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FIFOPush
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Write
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPKeyRoutine
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Write
</UL>

<P><STRONG><a name="[1ee]"></a>__0sprintf$2</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf2.o(i.__0sprintf$2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[29f]"></a>__1sprintf$2</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf2.o(i.__0sprintf$2), UNUSED)

<P><STRONG><a name="[16b]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf2.o(i.__0sprintf$2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_SetName
</UL>

<P><STRONG><a name="[2a0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2a1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2a2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1ed]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOCreate
</UL>

<P><STRONG><a name="[1ec]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOCreate
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[66]"></a>SetSysClockTo96</STRONG> (Thumb, 250 bytes, Stack size 12 bytes, system_mm32f103.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo96
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[65]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_mm32f103.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo96
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo96
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6b]"></a>delay</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[85]"></a>TI4_Config</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[83]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[81]"></a>TI2_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[7f]"></a>TI1_Config</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[91]"></a>DataStageOut</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
</UL>

<P><STRONG><a name="[93]"></a>DataStageIn</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>

<P><STRONG><a name="[95]"></a>NoData_Setup0</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NoData_Setup0 &rArr; Standard_ClearFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetDeviceFeature
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetEndPointFeature
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetInterface
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[9e]"></a>Data_Setup0</STRONG> (Thumb, 622 bytes, Stack size 40 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[a4]"></a>SPIWrite</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, w25q16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPIWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Read
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16PageProgram
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16ClipErase
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16BlockErase
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16SectorErase
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Reset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Open
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipBusy
</UL>

<P><STRONG><a name="[a8]"></a>SPIRead</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, w25q16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPIRead &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Read
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16Open
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipBusy
</UL>

<P><STRONG><a name="[b4]"></a>ChipBusy</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, w25q16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16PageProgram
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16ClipErase
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16BlockErase
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16SectorErase
</UL>

<P><STRONG><a name="[c1]"></a>IntToUnicode</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[c5]"></a>usb_report_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_report_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ret_status
</UL>

<P><STRONG><a name="[c7]"></a>usb_ret_status</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usb_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_ret_status &rArr; usb_report_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_report_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_report_in
</UL>

<P><STRONG><a name="[59]"></a>WriteData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart1.o(.text)
</UL>
<P><STRONG><a name="[1e]"></a>Null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart1.o(.data)
</UL>
<P><STRONG><a name="[12a]"></a>rf_goto_next_ch</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rf_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_ch
</UL>

<P><STRONG><a name="[12b]"></a>rf_get_ch_no</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rf_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_ch
</UL>

<P><STRONG><a name="[13c]"></a>SendData2_4G</STRONG> (Thumb, 554 bytes, Stack size 72 bytes, rf_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SendData2_4G &rArr; rf_transceiver &rArr; xn297l_transceive &rArr; xn297l_goto_wakeup &rArr; delay_1ms &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_high_first
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkData
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_HostTout
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_transceiver
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_HostTxDatas
</UL>

<P><STRONG><a name="[13f]"></a>SendDataBlueT</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rf_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SendDataBlueT &rArr; BT_TxTPDatas &rArr; UART_SendDatas &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_TxTPDatas
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_HostTxDatas
</UL>

<P><STRONG><a name="[14c]"></a>xn297l_write_1byte</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xn297l_write_1byte &rArr; sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRF_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_set_channel
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_sleep
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Carrier
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_stb3
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_stb1
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_set_ce_0
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_set_ce_1
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_clear_rx_fifo
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_clear_tx_fifo
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_chip_reset
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_clear_irq_flag
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_rx
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_tx
</UL>

<P><STRONG><a name="[14d]"></a>xn297l_write_bytes</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xn297l_write_bytes &rArr; sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRF_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_set_mac
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Carrier
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_goto_pd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_ack_fifo
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_pld_fifo
</UL>

<P><STRONG><a name="[14e]"></a>xn297l_read_bytes</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xn297l_read_bytes &rArr; sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRF_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_fifo_read
</UL>

<P><STRONG><a name="[151]"></a>xn297l_write_pld_fifo</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xn297l_write_pld_fifo &rArr; xn297l_write_bytes &rArr; sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_transceive
</UL>

<P><STRONG><a name="[152]"></a>xn297l_write_ack_fifo</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xn297l_write_ack_fifo &rArr; xn297l_write_bytes &rArr; sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_transceive
</UL>

<P><STRONG><a name="[153]"></a>xn297l_fifo_read</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xn297l_fifo_read &rArr; xn297l_read_bytes &rArr; sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_read_1byte
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_read_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_transceive
</UL>

<P><STRONG><a name="[159]"></a>xn297l_goto_tx</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xn297l_goto_tx &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_1byte
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPTimerDelay
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_set_ce_0
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_clear_tx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_transceive
</UL>

<P><STRONG><a name="[15a]"></a>xn297l_goto_rx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xn297l_goto_rx &rArr; delay_1ms &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_1byte
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_set_ce_0
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_clear_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_transceive
</UL>

<P><STRONG><a name="[15b]"></a>xn297l_tx_start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xn297l_tx_start &rArr; delay_1ms &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_set_ce_1
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_transceive
</UL>

<P><STRONG><a name="[15c]"></a>xn297l_rx_start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xn297l_rx_start &rArr; delay_1ms &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_set_ce_1
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_transceive
</UL>

<P><STRONG><a name="[15d]"></a>xn297l_clear_irq_flag</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xn297l_clear_irq_flag &rArr; xn297l_write_1byte &rArr; sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_1byte
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_transceive
</UL>

<P><STRONG><a name="[15e]"></a>xn297l_get_irq_flag</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xn297l_get_irq_flag &rArr; xn297l_read_1byte &rArr; sRF_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_read_1byte
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_transceive
</UL>

<P><STRONG><a name="[15f]"></a>xn297l_chip_reset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, xn297l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xn297l_chip_reset &rArr; delay_1ms &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_write_1byte
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_set_ce_0
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn297l_init
</UL>

<P><STRONG><a name="[166]"></a>GpioInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GpioInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initial
</UL>

<P><STRONG><a name="[5a]"></a>GetBTData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetBTData
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_UART_Rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluetooth.o(.text)
</UL>
<P><STRONG><a name="[168]"></a>SetBAUD</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, bluetooth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Command
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[169]"></a>BT_SetName</STRONG> (Thumb, 322 bytes, Stack size 104 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = BT_SetName &rArr; BT_Command &rArr; UART_SendDatas &rArr; BSPTimerDelay &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Command
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initial
</UL>

<P><STRONG><a name="[5b]"></a>WriteData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart2.o(.text)
</UL>
<P><STRONG><a name="[1f]"></a>Null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart2.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>Null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsptimer.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> bsptimer.o(.text)
<LI> bsptimer.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>WriteData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bspkey.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> bspkey.o(.text)
</UL>
<P><STRONG><a name="[18b]"></a>KeyScanRelease</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, bspkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPKeyRoutine
</UL>

<P><STRONG><a name="[18c]"></a>KeyScanPress</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, bspkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPKeyRoutine
</UL>

<P><STRONG><a name="[19d]"></a>MyMemcoy</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, bsphid.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPHIDReport
</UL>

<P><STRONG><a name="[19e]"></a>MyMemset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsphid.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPHIDReport
</UL>

<P><STRONG><a name="[1b4]"></a>RVU_CheckStatus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bspwatchdog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogInit
</UL>

<P><STRONG><a name="[1b6]"></a>PVU_CheckStatus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bspwatchdog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPWatchDogInit
</UL>

<P><STRONG><a name="[1c9]"></a>SoundRead</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, bspsound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SoundRead &rArr; BSPFlashRead &rArr; W25Q16Read &rArr; SPIRead &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPFlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1d1]"></a>FLASHErase</STRONG> (Thumb, 152 bytes, Stack size 1056 bytes, bspeeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMDelete
</UL>

<P><STRONG><a name="[1d5]"></a>EEPROM_Write_NoCheck</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, bspeeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPEEPROMWrite
</UL>

<P><STRONG><a name="[1d9]"></a>LEDFlash</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPLEDOff
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPLEDOn
</UL>

<P><STRONG><a name="[1da]"></a>ScanCode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPCodeScannerScanStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestMatch
</UL>

<P><STRONG><a name="[61]"></a>Timer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timer &rArr; BSPCodeScannerScanStop &rArr; CM3800BScanStop
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPCodeScannerScanStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>LedFlash</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LedFlash &rArr; BSPLEDOff
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPLEDOff
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPLEDOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[1ef]"></a>_printf_core</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, printf2.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$2
</UL>

<P><STRONG><a name="[62]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf2.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf2.o(i.__0sprintf$2)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
